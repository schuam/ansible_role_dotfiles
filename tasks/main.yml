---
- name: Include OS-specific tasks.
  include_tasks: "{{ ansible_os_family }}_pre_tasks.yml"

- name: Ensure dotfiles repo is cloned locally.
  git:
    repo: "{{ dotfiles_repo }}"
    dest: "{{ dotfiles_repo_local_destination }}"
    version: "{{ dotfiles_repo_version }}"
    accept_hostkey: "{{ dotfiles_repo_accept_hostkey }}"
  become: false

- name: Ensure all bash related configured dotfiles are links.
  command: "ls -F ~/{{ item }}"
  register: existing_bash_dotfile_info
  failed_when: false
  check_mode: false
  changed_when: false
  with_items: "{{ bash_configs }}"
  become: false

- name: Remove existing bash dotfiles if a replacement is being linked.
  file:
    path: "~/{{ item.item }}"
    state: absent
  when: "'@' not in item.stdout"
  become: false
  loop: "{{ existing_bash_dotfile_info.results }}"
  loop_control:
    label: "{{ item.item }}"

- name: Link bash dotfiles into home directory.
  file:
    src: "{{ dotfiles_repo_local_destination }}/bash/{{ item }}"
    dest: "~/{{ item }}"
    state: link
  become: false
  with_items: "{{ bash_configs }}"

- name: Source .bash_profile and make $XDG_CONFIG_HOME available.
  shell: 'source ~/.bash_profile 2>/dev/null && echo $XDG_CONFIG_HOME'
  failed_when: false
  check_mode: false
  changed_when: false
  become: false
  register: xdg_config_home

- name: Source .bash_profile and make $XDG_DATA_HOME available.
  shell: 'source ~/.bash_profile 2>/dev/null && echo $XDG_DATA_HOME'
  failed_when: false
  check_mode: false
  changed_when: false
  become: false
  register: xdg_data_home

- name: Find configurations in {{ dotfiles_repo_local_destination }}/.config
  command: "find {{ dotfiles_repo_local_destination }}/.config -mindepth 1 -maxdepth 1 -printf '%f\n'"
  failed_when: false
  check_mode: false
  changed_when: false
  register: configs
  become: false

- name: Ensure {{ xdg_config_home.stdout }} and {{ xdg_data_home.stdout }} exist.
  file:
    path: "{{ item }}"
    state: directory
    mode: "0700"
  become: false
  loop:
    - "{{ xdg_config_home.stdout }}"
    - "{{ xdg_data_home.stdout }}"
  loop_control:
    label: "{{ item }}"

- name: Ensure all configured dotfiles are links.
  command: "ls -F {{ xdg_config_home.stdout }}/{{ item }}"
  register: existing_dotfile_info
  failed_when: false
  check_mode: false
  changed_when: false
  with_items: "{{ configs.stdout_lines }}"
  become: false

- name: Remove existing dotfiles if a replacement is being linked.
  file:
    path: "{{ xdg_config_home.stdout }}/{{ item.item }}"
    state: absent
  when: "'@' not in item.stdout"
  become: false
  loop: "{{ existing_dotfile_info.results }}"
  loop_control:
    label: "{{ item.item }}"

- name: Link dotfiles into {{ xdg_config_home.stdout }}.
  file:
    src: "{{ dotfiles_repo_local_destination }}/.config/{{ item }}"
    dest: "{{ xdg_config_home.stdout }}/{{ item }}"
    state: link
  become: false
  with_items: "{{ configs.stdout_lines }}"

- name: Ensure {{ xdg_data_home.stdout }}/nvim/site/autoload exists.
  file:
    path: "{{ xdg_data_home.stdout }}/nvim/site/autoload"
    state: directory
    mode: "0700"
  become: false

- name: Download vim-plug to install plugins for neovim.
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    dest: "{{ xdg_data_home.stdout }}/nvim/site/autoload/plug.vim"
  become: false

- name: Install neovim plugins
  shell: >
    XDG_CONFIG_HOME="{{ xdg_config_home.stdout }}"
    XDG_DATA_HOME="{{ xdg_data_home.stdout }}"
    nvim --headless +PlugInstall +qall
  failed_when: false
  check_mode: false
  changed_when: false
  become: false
